<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="jakarta.faces.core"
	xmlns:h="jakarta.faces.html"
	xmlns:ui="jakarta.faces.facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="exceptionhandler/FullAjaxExceptionHandler" />
			<f:attribute name="vdl.paths" value="of/printStackTrace.fn" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/exceptionhandlers/ExceptionBean.java,templates/errorpage.xhtml,errorpages/bug.xhtml,errorpages/database.xhtml,errorpages/expired.xhtml,errorpages/epicfail.xhtml" />
		</f:metadata>
	</ui:define>

	<ui:define name="description-extra">
		<h3>Demo</h3>
		<p>
			This exception handler is also  
			<a href="https://github.com/omnifaces/showcase/blob/master/src/main/webapp/WEB-INF/faces-config.xml">configured</a>
			on this showcase web application. The following error pages are been
			<a href="https://github.com/omnifaces/showcase/blob/master/src/main/webapp/WEB-INF/web.xml">configured</a>
			on this showcase web application:
		</p>
		<pre class="prettyprint"><code class="lang-xml"> &lt;error-page&gt;
     &lt;exception-type&gt;jakarta.faces.application.ViewExpiredException&lt;/exception-type&gt;
     &lt;location&gt;/WEB-INF/errorpages/expired.xhtml&lt;/location&gt;
 &lt;/error-page&gt;
 &lt;error-page&gt;
     &lt;exception-type&gt;java.sql.SQLException&lt;/exception-type&gt;
     &lt;location&gt;/WEB-INF/errorpages/database.xhtml&lt;/location&gt;
 &lt;/error-page&gt;
 &lt;error-page&gt;
     &lt;exception-type&gt;java.lang.RuntimeException&lt;/exception-type&gt;
     &lt;location&gt;/WEB-INF/errorpages/bug.xhtml&lt;/location&gt;
 &lt;/error-page&gt;</code></pre>
	</ui:define>

	<ui:define name="demo">
		<p>
			The buttons in the below demo will each purposefully throw an exception. You'll see that an error page template
			is presented regardless of if it's an ajax request or not.
		</p>
		<h:form>
			<h:commandButton value="throw runtime exception on ajax request" action="#{exceptionBean.throwRuntimeException}">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
		</h:form>
		<h:form>
			<h:commandButton value="throw runtime exception on normal request" action="#{exceptionBean.throwRuntimeException}" />
		</h:form>
		<h:form>
			<h:commandButton value="throw SQL exception on ajax request" action="#{exceptionBean.throwSQLException}">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
		</h:form>
		<h:form>
			<h:commandButton value="throw SQL exception on normal request" action="#{exceptionBean.throwSQLException}" />
		</h:form>
		<h:form>
			<h:commandButton value="throw runtime exception during render of ajax request">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
			<h:outputText value="#{exceptionBean.throwRuntimeException()}" rendered="#{component.namingContainer.submitted}" />
		</h:form>
		<h:form>
			<h:commandButton value="throw runtime exception during render of normal request" />
			<h:outputText value="#{exceptionBean.throwRuntimeException()}" rendered="#{component.namingContainer.submitted}" />
		</h:form>
		<h:form>
			<h:commandButton value="cause epic fail on ajax request" action="#{exceptionBean.throwEpicFailException}">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
		</h:form>
		<p>
			Also, if you wait 
			#{of:formatNumber(session.maxInactiveInterval / 60, '#')}
			minutes or manually delete the <code>JSESSIONID</code> cookie or press the below "Invalidate session" button 
			and then click any of the buttons on the demo, then you'll get a view expired exception which will also end up 
			in a specific error page.
		</p>
		<p>
			<input type="button" value="Invalidate session"
				onclick="$.get('#{request.contextPath}/invalidatesession?#{now.time}', alert('Session invalidated!'))" />
		</p>
	</ui:define>		
</ui:composition>