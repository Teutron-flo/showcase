<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:of="http://omnifaces.org/functions"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="taghandler/Validator" />
			<f:attribute name="vdl.paths" value="o/validator" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/taghandlers/ValidatorBean.java,classes/org/omnifaces/showcase/model/ExampleEntity.java" />
		</f:metadata>
	</ui:define>

	<ui:define name="description-extra">
		<h3>Demo</h3>
		<p>
			In the below first demo, it was the intent to use <code>&lt;f:validateLongRange&gt;</code> as follows:
		</p>
		<pre class="prettyprint"><code class="lang-xhtml"> &lt;f:validateLongRange minimum="\#{question.minimum}" maximum="\#{question.maximum}" /&gt;</code></pre>
		<p>
			But this fails hard as the minimum and maximum values are set during view build time instead of during processing the validation.
			The \#{question} is not available during view build time and thus both minimum and maximum will default to 0
			(for a background explanation, check <a href="https://stackoverflow.com/q/15682196/157882">this Stack Overflow answer</a>).
			It works as intuitively expected with the <code>&lt;o:validator&gt;</code> as it allows a render time evaluation of attributes.
		</p>
		<p>
			For another related use case, checkout the 
			<h:link outcome="converter"><code>&lt;o:converter&gt;</code> showcase page</h:link>.
		</p>
		<p>
			Further, the <code>&lt;o:validator&gt;</code> also allows setting the validation message on a per-validator basis
			by the <code>message</code> attribute. This is not possible with <code>&lt;f:validator&gt;</code> and the 
			<code>validatorMessage</code> attribute of the parent input component applies to <i>all</i> validators.
			Note that the <code>message</code> attribute of <code>&lt;o:validator&gt;</code> has <i>no</i> effect when the
			<code>validatorMessage</code> attribute of the parent input component has already been set.
		</p>
	</ui:define>

	<ui:define name="demo">
		<h3>With f:validateLongRange in each row - fails!</h3>
		<h:form>
			<h:dataTable value="#{validatorBean.questions}" var="question">
				<h:column>
					Enter value between #{question.minimum} and #{question.maximum}
				</h:column>
				<h:column>
					<h:inputText id="input" value="#{question.answer}" required="true" requiredMessage="Fill out the value!">
						<f:validateLongRange minimum="#{question.minimum}" maximum="#{question.maximum}" />
					</h:inputText>
				</h:column>
				<h:column>
					<h:message for="input" />
				</h:column>
			</h:dataTable>
			<h:commandButton value="Submit">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
			<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
		</h:form>

		<hr />

		<h3>With o:validator in each row - works!</h3>
		<h:form>
			<h:dataTable value="#{validatorBean.questions}" var="question">
				<h:column>
					Enter value between #{question.minimum} and #{question.maximum}
				</h:column>
				<h:column>
					<h:inputText id="input" value="#{question.answer}" required="true" requiredMessage="Fill out the value!">
						<o:validator validatorId="jakarta.faces.LongRange" minimum="#{question.minimum}" maximum="#{question.maximum}" message="Invalid value!" />
					</h:inputText>
				</h:column>
				<h:column>
					<h:message for="input" />
				</h:column>
			</h:dataTable>
			<h:commandButton value="Submit">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
			<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
		</h:form>

		<hr />

		<h3>Set validator message on a per-validator basis</h3>
		<h:form>
			<h:messages />
			<h:dataTable binding="#{table}" value="#{validatorBean.entities}" var="entity">
				<h:column>
					<c:set var="label" value="Input #{table.rowIndex + 1}" />
					<o:outputLabel for="input" value="#{label}" />
				</h:column>
				<h:column>
					<h:inputText id="input" value="#{entity.value}" required="true" requiredMessage="#{label} is required">
						<o:validator validatorId="jakarta.faces.Length" minimum="5" message="{0} must be at least 5 chars" />
						<o:validator validatorId="jakarta.faces.RegularExpression" pattern="\\d+" message="{0} must contain digits only" /><!-- Fails in Apache EL (Tomcat/TomEE/etc), use \d+ instead. -->
					</h:inputText>
				</h:column>
			</h:dataTable>
			<h:commandButton value="Submit">
				<f:ajax execute="@form" render="@form" />
			</h:commandButton>
			<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
		</h:form>
	</ui:define>
</ui:composition>