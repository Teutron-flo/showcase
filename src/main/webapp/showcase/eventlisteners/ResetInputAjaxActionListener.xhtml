<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="jakarta.faces.core"
	xmlns:h="jakarta.faces.html"
	xmlns:ui="jakarta.faces.facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="eventlistener/ResetInputAjaxActionListener" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/eventlisteners/ResetInputBean.java" />
		</f:metadata>
	</ui:define>

	<ui:define name="description-extra">
		<h3>PrimeFaces</h3>
		<p>
			Note that PrimeFaces has implemented the same idea later in its new version 3.4 
			<a href="https://www.primefaces.org/showcase/ui/misc/resetInput.xhtml"><code>&lt;p:resetInput&gt;</code></a>,
			so if you happen to use PrimeFaces already and want to apply it on specific command buttons only, then you 
			may want to use it instead.
		</p>
 	</ui:define>		

	<ui:define name="demo">
		<h3>Form without <code>ResetInputAjaxActionListener</code></h3>
		<h:form id="form1">
			<p>input1: Enter something (but don't enter "Updated!").</p>
			<p>
				<h:inputText id="input1" value="#{resetInputBean.input1}" required="true" />
				<h:message for="input1" />
			</p>
			<p>input2: Leave this field empty or enter a non-numeric value to cause a validation failure.</p>
			<p>
				<h:inputText id="input2" value="#{resetInputBean.input2}" required="true" />
				<h:message for="input2" />
			</p>
			<p>Press "submit" and then "update". The "update" simulates changing model values externally.</p>
			<p>
				<h:commandButton value="Submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="Update" action="#{resetInputBean.update}" >
					<f:ajax execute="@this" render="@form" />
				</h:commandButton>
				<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
			</p>
			<p><b>Problem</b>: input1 is not updated with text "Updated!". And when MyFaces is used, input2 isn't updated with text "42" either.</p>
		</h:form>

		<hr />
		
		<h3>Same form, with <code>ResetInputAjaxActionListener</code> on "update"</h3>
		<h:form id="form2">
			<p>input1: Enter something (but don't enter "Updated!").</p>
			<p>
				<h:inputText id="input1" value="#{resetInputBean.input1}" required="true" />
				<h:message for="input1" />
			</p>
			<p>input2: Leave this field empty or enter a non-numeric value to cause a validation failure.</p>
			<p>
				<h:inputText id="input2" value="#{resetInputBean.input2}" required="true" />
				<h:message for="input2" />
			</p>
			<p>Press "submit" and then "update". The "update" simulates changing model values externally.</p>
			<p>
				<h:commandButton value="Submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:commandButton value="Update" action="#{resetInputBean.update}" >
					<f:ajax execute="@this" render="@form" />
					<f:actionListener type="org.omnifaces.eventlistener.ResetInputAjaxActionListener" />
				</h:commandButton>
				<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
			</p>
			<p><b>Solved</b>: input1 is now updated with text "Updated!".</p>
		</h:form>
	</ui:define>		
</ui:composition>