<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="jakarta.faces.core"
	xmlns:h="jakarta.faces.html"
	xmlns:ui="jakarta.faces.facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="eventlistener/InvokeActionEventListener" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/eventlisteners/InvokeActionBean.java" />

			<f:viewParam id="param" name="param" value="#{invokeActionBean.param}" />
			<f:event type="postInvokeAction" listener="#{invokeActionBean.initParam}" /><!-- The second declaration in demo snippet will cause ISE in MyFaces because of double redirect. -->
		</f:metadata>
	</ui:define>

	<!-- NOTE: MyFaces 2.2.8 (TomEE 7.0.0) interprets below metadata too and therefore fails with ISE in sendRedirect(). -->

	<ui:define name="demo-meta">
		<f:metadata>
			<f:viewParam name="param" value="#{invokeActionBean.param}" />
			<f:event type="postInvokeAction" listener="#{invokeActionBean.initParam}" />
		</f:metadata>
	</ui:define>

	<ui:define name="demo">
		<h3>Replacement for <code>preRenderView</code> event</h3>

		<p>
			Clicking <h:link value="this link" outcome="#{view.viewId}?param=test" /> with a "test" request parameter 
			should force a redirect with a faces message in the flash scope which should appear below. This wouldn't
			have worked when <code>preRenderView</code> event is been used.
		</p>
		<p>
			Message: <h:message for="param" />
		</p>

		<hr />

		<h3>Invoking multiple action listeners in <code>UIInput</code> and <code>UICommand</code> components</h3>
		<p>
			Typing in the input field and clicking the submit button of the below demo form should invoke several 
			action listeners which should each set a global faces message.
		</p>
		<h:form>
			<h:inputText value="#{invokeActionBean.input}">
				<f:ajax event="keyup" execute="@this" listener="#{invokeActionBean.inputListener()}" render=":messages" />
				<f:event type="preInvokeAction" listener="#{invokeActionBean.preInvokeAction}" />
				<f:event type="postInvokeAction" listener="#{invokeActionBean.postInvokeAction}" />
			</h:inputText>
			<h:commandButton value="submit" action="#{invokeActionBean.submit}">
				<f:ajax execute="@form" render=":messages" />
				<f:event type="preInvokeAction" listener="#{invokeActionBean.preInvokeAction}" />
				<f:event type="postInvokeAction" listener="#{invokeActionBean.postInvokeAction}" />
			</h:commandButton>
		</h:form>
		<h:messages id="messages" globalOnly="true" />
	</ui:define>		
</ui:composition>