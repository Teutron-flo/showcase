<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="jakarta.faces.core"
	xmlns:h="jakarta.faces.html"
	xmlns:ui="jakarta.faces.facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:of="http://omnifaces.org/functions"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="cdi/Eager" />
			<f:attribute name="src.paths" value="classes/org/omnifaces/showcase/cdi/MyEagerRequestBean.java,classes/org/omnifaces/showcase/cdi/MyRequestBean.java,classes/org/omnifaces/showcase/cdi/MyStartupBean.java" />
		</f:metadata>
	</ui:define>

	<ui:define name="description-extra">
		<ui:include src="/WEB-INF/includes/cdi/known-issues.xhtml" />
	</ui:define>

	<ui:define name="demo">
		<h3>Bean instantiated at beginning of request</h3>
		<p>
			A bean annotated with <code>@Model</code> <small>(a stereotype for @RequestScoped and @Named)</small> 
			has been annotated with <code>@Eager</code> setting <code>requestURI</code> to the URI of this page relative to the 
			application root.
			For the demo the <code>@PostConstruct</code> method will grab the current nano seconds time. When the bean is referenced
			on this page it will show the elapsed time in nanoseconds.
		</p>
		<p>
			One usecase for this feature in a real application could be calling an <code>@Asynchronous</code> annotated method that
			loads data from a database and returns a <code>Future</code>. That way loading of this data and the processing of the
			request pipeline plus the building and rendering of a view up till the moment the <code>Future#get()</code> is referenced 
			can overlap. A more concrete example can be found in the chapter
			<a href="https://balusc.omnifaces.org/2014/06/omnifaces-18-released.html" target="_blank">Eagerly instantiate a CDI managed bean</a>.
		</p>
		
		<blockquote>
			Elapsed time in nanoseconds since <code>@Eager @RequestScoped</code> bean initiated at the start of this request: <strong>#{myEagerRequestBean.elapsedTime} ns</strong>.
			<br/>
			As comparison, elapsed time in nanoseconds since non-<code>@Eager @RequestScoped</code> bean initiated in this request: <strong>#{myRequestBean.elapsedTime} ns</strong>.
			<br/>
			So, you have <strong>#{myEagerRequestBean.elapsedTime - myRequestBean.elapsedTime} ns</strong> time space to perform some <code>@Asynchronous</code> initialization.
		</blockquote>
		
		<h3>Bean instantiated when application starts up</h3>
		<p>
			A bean has been annotated with <code>@Startup</code> <small>(a stereotype for @Eager and @ApplicationScoped)</small> and
			sets its startupDate property in the <code>@PostConstruct</code> method, which will thus represent the time this
			application started.			
		</p>
		<blockquote>
			Application started at: <strong>#{of:formatDateWithTimezone(myStartupBean.startupDate, 'd MMM yyyy HH:mm.ss.SSS', 'UTC')} UTC</strong>
			<br/>
			As comparison, the Faces <code>\#{startup}</code> is at: <strong>#{of:formatDateWithTimezone(startup, 'd MMM yyyy HH:mm.ss.SSS', 'UTC')} UTC</strong>
		</blockquote>
	</ui:define>
</ui:composition>