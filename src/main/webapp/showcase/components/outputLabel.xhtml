<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
>
	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="api.path" value="component/output/OutputLabel" />
			<f:attribute name="vdl.paths" value="o/outputLabel" />
		</f:metadata>
	</ui:define>

	<ui:define name="description-extra">
		<h3>PrimeFaces</h3>
		<p>
			Note that PrimeFaces has implemented the same idea later in its new version 3.3 
			<a href="https://www.primefaces.org/showcase/ui/misc/outputLabel.xhtml"><code>&lt;p:outputLabel&gt;</code></a>,
			so if you happen to use PrimeFaces already, you may want to use it instead. 
			It's however known to have a problem when used inside repeater components.
		</p>
	</ui:define>

	<ui:define name="demo">
		<p>
			Submit the following forms without entering anything to see it.
		</p>

		<h3>With standard <code>h:outputLabel</code></h3>
		<h:form>
			<h:panelGrid columns="3">
				<h:outputLabel for="input" value="Foo" />
				<h:inputText id="input" required="true" />
				<h:message for="input" />

				<h:panelGroup />
				<h:commandButton value="Submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:panelGroup>
					<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
				</h:panelGroup>
			</h:panelGrid>
		</h:form>

		<hr />
		
		<h3>With OmniFaces <code>o:outputLabel</code></h3>
		<h:form>
			<h:panelGrid columns="3">
				<o:outputLabel for="input" value="Foo" />
				<h:inputText id="input" required="true" />
				<h:message for="input" />

				<h:panelGroup />
				<h:commandButton value="Submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:panelGroup>
					<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
				</h:panelGroup>
			</h:panelGrid>
		</h:form>

		<hr />
		
		<h3>Dynamic <code>o:outputLabel</code></h3>
		<h:form>
			<h:panelGrid columns="3">
				<o:outputLabel for="input" value="#{now.toString()}" />
				<h:inputText id="input" required="true" />
				<h:message for="input" />

				<h:panelGroup />
				<h:commandButton value="Submit">
					<f:ajax execute="@form" render="@form" />
				</h:commandButton>
				<h:panelGroup>
					<h:outputText value="OK!" rendered="#{facesContext.postback and not facesContext.validationFailed}" />
				</h:panelGroup>
			</h:panelGrid>
		</h:form>
	</ui:define>
</ui:composition>