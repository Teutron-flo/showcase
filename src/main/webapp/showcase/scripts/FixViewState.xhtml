<ui:composition template="/WEB-INF/templates/showcase.xhtml"
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:o="http://omnifaces.org/ui"
	xmlns:demo="http://omnifaces.org/showcase">

	<ui:define name="meta">
		<f:metadata>
			<f:attribute name="js.paths" value="../../../../../../../3.x/src/main/resources/META-INF/resources/omnifaces/fixviewstate.unminified.js" />
			<f:attribute name="deprecated" value="true" />
		</f:metadata>
	</ui:define>

	<ui:define name="description">
		<p class="highlight">
			This script is <strong>deprecated</strong> since OmniFaces 3.0 because it has been fixed in native JSF since JSF version 2.3.
			This script has been <strong>removed</strong> from OmniFaces since OmniFaces 4.0.
		</p>
		<p>
			This script fixes the JSF view state if necessary.
			In Mojarra, it get lost on certain forms during certain ajax updates
			(e.g. <a href="http://balusc.omnifaces.org/2011/09/communication-in-jsf-20.html#AjaxRenderingOfContentWhichContainsAnotherForm">updating content which in turn contains another form</a>).
			Normally, the <code>jsf.js</code> script adds the JSF view state back to the updated form,
			but it does that only for the enclosing form, 
			not for other forms when they are not explicitly specified in the <code>render/update</code> attribute. 
			When this script is loaded <em>after</em> the standard <code>jsf.js</code> script containing standard JSF ajax API,
			then it will be automatically applied on all JSF ajax requests.
		</p>
		<pre class="prettyprint"><code class="lang-xhtml"> &lt;h:outputScript library="javax.faces" name="jsf.js" target="head" /&gt;
 &lt;h:outputScript library="omnifaces" name="fixviewstate.js" target="head" /&gt;</code></pre>
		<p>
			This script also recognizes jQuery ajax API as used by some	component libraries such as PrimeFaces.
			If jQuery is present, then it will also be automatically applied on all jQuery ajax requests.
		</p>
		<pre class="prettyprint"><code class="lang-xhtml"> &lt;h:outputScript library="primefaces" name="jquery/jquery.js" target="head" /&gt;
 &lt;h:outputScript library="omnifaces" name="fixviewstate.js" target="head" /&gt;</code></pre>
		<p>
			Explicit declaration of <code>jsf.js</code> or <code>jquery.js</code> via <code>&lt;h:outputScript&gt;</code> is not strictly necessary.
			You only need to make sure that the <code>&lt;h:outputScript&gt;</code> on <code>fixviewstate.js</code>
			is being placed inside the <code>&lt;h:body&gt;</code> so that you can ensure that it's loaded <em>after</em> the JSF and/or jQuery script.
		</p>
		<pre class="prettyprint"><code class="lang-xhtml"> &lt;h:head&gt;
     ...
 &lt;/h:head&gt;
 &lt;h:body&gt;
     &lt;h:outputScript library="omnifaces" name="fixviewstate.js" target="head" /&gt;
     ...
 &lt;/h:body&gt;</code></pre>
		<p>
			In case your JSF component library doesn't utilize standard JSF nor jQuery ajax API, but a proprietary one,
			and exposes the same "missing view state" problem, 
			then you can still apply this script manually during the "complete" event of the ajax request
			whereby the concrete <code>XMLHttpRequest</code> instance is available as some argument as follows:
		</p>
		<pre class="prettyprint"><code class="lang-javascript"> function someOncompleteCallbackFunction(xhr) {
     OmniFaces.FixViewState.apply(xhr.responseXML);
 });</code></pre>
		<p>
			This was scheduled to be fixed in JSF 2.2 spec, however it was postponed to JSF 2.3. 
			We can't wait any longer, so it's been added to OmniFaces. 
			Note that this fix is not necessary for MyFaces as they have internally already fixed it for long in their <code>jsf.js</code>.
		</p>
		<p>
			In the below demo, try to subsequently press the both buttons in turn as long until a faces message shows up.
			When the <code>fixviewstate.js</code> is not loaded, you'll notice that after the first time, 
			you need to press the other button twice in order to see it.
			This problem is fixed by loading the <code>fixviewstate.js</code>.
		</p>
	</ui:define>
</ui:composition>